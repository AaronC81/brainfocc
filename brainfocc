#!/usr/bin/env ruby
require 'io/console'
require 'thread'

module PidController
  @next_pid = 1
  @new_pid_lock = Mutex.new

  def self.new_pid
    @new_pid_lock.synchronize do
      result = @next_pid
      @next_pid += 1
      result
    end
  end
end

# 256 channels are initialized by default
# send waits for receive and vice versa

# ^ = fork: places ID in memory, first process has zero and they increment
# & = channel select: switches to performing channel operations on the channel ID in memory
#     each process has its own active channel ID
# ? = receive: waits for data and writes it to memory
# ! = send: sends the data in memory to the channel

class Interpreter
  MEMORY_SIZE = 3000

  def initialize(instructions, memory, instructions_ptr = nil, memory_ptr = nil, pid = nil, channel = nil)
    @memory = memory
    @memory_ptr = memory_ptr || 0

    @instructions = instructions
    @instructions_ptr = instructions_ptr || 0

    @pid = pid || 0
    @channel = channel || 0

    puts "== Interpreter PID #{@pid} instantiated"
  end

  def runtime_error(desc)
    puts "Runtime error: #{desc}"
    puts "  at instruction #{@instructions_ptr + 1}, opcode #{@instructions[@instructions_ptr]} (1-indexed)"
    puts "  at memory address #{@memory_ptr}, value #{@memory[@memory_ptr]}"
    exit 1
  end

  def run
    until @instructions_ptr >= @instructions.length
      case @instructions[@instructions_ptr]
      when '<'
        runtime_error "cannot move off left of memory" if @memory_ptr.zero?
        @memory_ptr -= 1
      when '>'
        runtime_error "cannot move off right of memory" if @memory_ptr == Interpreter::MEMORY_SIZE - 1
        @memory_ptr += 1
      when '+'
        @memory[@memory_ptr] = (@memory[@memory_ptr] + 1) % 256
      when '-'
        @memory[@memory_ptr] = (@memory[@memory_ptr] - 1) % 256
      when '.'
        print @memory[@memory_ptr].chr
      when '.'
        @memory[@memory_ptr] = STDIN.getch
        # Explicit ctrl-C check
        exit 1 if @memory[@memory_ptr] == '\3'
      when '['
        if @memory[@memory_ptr].zero?
          balance = 1
          until balance.zero?
            @instructions_ptr += 1
            balance -= 1 if @instructions[@instructions_ptr] == ']'
            balance += 1 if @instructions[@instructions_ptr] == '['
            runtime_error "unmatched [" if @instructions_ptr >= @instructions.length
          end
        end
      when ']'
        unless @memory[@memory_ptr].zero?
          balance = 1
          until balance.zero?
            @instructions_ptr -= 1
            balance -= 1 if @instructions[@instructions_ptr] == '['
            balance += 1 if @instructions[@instructions_ptr] == ']'
            runtime_error "unmatched ]" if @instructions_ptr <= 0
          end
        end
      when '^'
        # == Fork ==
        # Create an identical new interpreter. The current data byte becomes
        # the PID of the new process for the fork, or 0 if it's the spawning
        # process. The new interpreter will run concurrently alongside this
        # one.

        forked_pid = PidController.new_pid
        forked_memory = @memory.clone
        forked_memory[@memory_ptr] = forked_pid

        forked_interpreter = Interpreter.new(
          @instructions,
          forked_memory,
          @instructions_ptr + 1,
          @memory_ptr,
          forked_pid,
          @channel,
        )
        Thread.new do
          forked_interpreter.run
        end

        @pid = 0
      when '&'
        # == Channel select ==
        # Switches to the using the channel number at the current data byte.
        @channel = @memory[@memory_ptr]
      when '!'
        # == Send ==
        # Sends the data byte on the current channel and waits for it to be 
        # received.
        puts "#{@pid} sends #{@memory[@memory_ptr]} on #{@channel}"
      when '?'
        # == Receive ==
        # Waits to receives a data byte from the current channel.
        puts "#{@pid} receives from #{@channel}"
      else
        # Ignore
      end

      @instructions_ptr += 1
    end
  end
end

interpreter = Interpreter.new(
  File.read(ARGV[0]),
  [0] * Interpreter::MEMORY_SIZE,
)
Thread.new do
  interpreter.run
end

loop {}